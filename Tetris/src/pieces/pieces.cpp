#include "pieces.h"

namespace core {
namespace pieces {

	char mPieces[7][4][5][5] =
	{
		// Square
		{
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 1, 1, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 1, 1, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 1, 1, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 1, 1, 0},
				{0, 0, 0, 0, 0}
			}
		},
		// I
		{
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 1, 2, 1, 1},
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 2, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 1, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{1, 1, 2, 1, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 1, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 2, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			}
		},
		// L
		{
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 2, 0, 0},
				{0, 0, 1, 1, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 1, 2, 1, 0},
				{0, 1, 0, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 1, 1, 0, 0},
				{0, 0, 2, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 1, 0},
				{0, 1, 2, 1, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0}
			}
		},
		// L mirrored
		{
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 2, 0, 0},
				{0, 1, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 1, 0, 0, 0},
				{0, 1, 2, 1, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 1, 0},
				{0, 0, 2, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 1, 2, 1, 0},
				{0, 0, 0, 1, 0},
				{0, 0, 0, 0, 0}
			}
		},
		// N
		{
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 1, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 1, 2, 0, 0},
				{0, 0, 1, 1, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 1, 2, 0, 0},
				{0, 1, 0, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 1, 1, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0}
			}
		},
		// N mirrored
		{
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 0, 1, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 1, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 1, 0, 0, 0},
				{0, 1, 2, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 1, 0},
				{0, 1, 2, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0}
			}
		},
		// T
		{
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 2, 1, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0},
				{0, 1, 2, 1, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 1, 2, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0, 0},
				{0, 0, 1, 0, 0},
				{0, 1, 2, 1, 0},
				{0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0}
			}
		}
	};

	int mPiecesInitialPosition[7][4][2] =
	{
		//Square
		{
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -3 }
		},
		// I
		{
			{ -2, -2 },
			{ -2, -3 },
			{ -2, -2 },
			{ -2, -2 }
		},
		// L
		{
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -2 }
		},
		// L mirrored
		{
			{ -2, -3 },
			{ -2, -2 },
			{ -2, -3 },
			{ -2, -3 }
		},
		// N
		{
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -2 }
		},
		// N mirrored
		{
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -2 }
		},
		//T
		{
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -3 },
			{ -2, -2 }
		}
	};

	int Pieces::GetBlockType(int piece, int rotation, int x, int y)
	{
		return mPieces[piece][rotation][x][y];
	}

	int Pieces::GetXInitialPosition(int piece, int rotation)
	{
		return mPiecesInitialPosition[piece][rotation][0];
	}

	int Pieces::GetYInitialPosition(int piece, int rotation)
	{
		return mPiecesInitialPosition[piece][rotation][1];
	}

}}
